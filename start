#!/bin/sh
Outerwallsflag="false"
PPI=600
THRESHOLD=0.01
BLOBSIZE=100
SCALE=1000
FILES=$PWD/
binary="/Applications/QCAD-Pro.app/Contents/resources/qcad"
shopt -s nullglob
taskCount=(*.dwg)
taskCount=${#taskCount[@]}
taskDone=0
progressBarWidth=20

while getopts "x:y:w:h:s:p:t:b: o" option
do
  case "${option}"
  in
  x) XOFF=$OPTARG;;
  y) YOFF=$OPTARG;;
  w) WIDTH=$OPTARG;;
  h) HEIGHT=$OPTARG;;
  s) SCALE=$OPTARG;;
  t) THRESHOLD=$OPTARG;;
  p) PPI=$OPTARG;;
  o) Outerwallsflag="true";;
  b) BLOBSIZE=$OPTARG;;
  esac
done

mainConversion (){
		
  convert -density $2                   \
  "Helperfiles/$1.pdf"                  \
  -alpha off                            \
  -negate                               \
  \(                                    \
  -clone 0                              \
  -fill "#000000"                       \
  -colorize 100                         \
  \)                                    \
  \(                                    \
  -clone 0,1                            \
  -compose difference                   \
  -composite                            \
  -separate                             \
  +channel                              \
  -evaluate-sequence max                \
  -auto-level                           \
  \)                                    \
  -delete 1                             \
  -alpha off                            \
  -compose over                         \
  -compose copy_opacity                 \
  -composite                            \
  -resize 2048x2048                     \
  -sharpen 0x1.0                        \
  -colorspace Gray                      \
  -quality 90                           \
  "PNG/$1.png"

  convert "PNG/$1.png"          \
  -channel A -fx "p*(p>$3?22:0)"\
  "PNG/$1.png"

   convert -density $2                  \
      "Helperfiles/$1.pdf"              \
      -resize 2048x2048                 \
      -sharpen 0x1.0                    \
      -colorspace Gray                  \
      -quality 90                       \
      -background white                 \
      -alpha remove                     \
      -negate       \
      -threshold 0 \
       -negate      \
      "PRIMEPNG/$1.png"
}

getCoordinates (){
   convert -density "$1"                \
      "Coordinatefiles/$2.pdf"          \
      -resize 2048x2048                 \
      -sharpen 0x1.0                    \
      -colorspace Gray                  \
      -quality 90                       \
      -background white                 \
      -alpha remove                     \
      -negate                           \
      -threshold 0                      \
      -negate                          \
      "Coordinatefiles/auto-level.png"

      convert "Coordinatefiles/auto-level.png"  -fill red -fuzz 5% -draw "color 0,0 floodfill" -fill black +opaque red -fill white -opaque red -alpha off -morphology close diamond "Coordinatefiles/filled.png"
      
      convert "Coordinatefiles/filled.png" -morphology edgein octagon:1 "Coordinatefiles/finallines.png"

      convert "Coordinatefiles/finallines.png" -transparent black "Coordinatefiles/finaledges.png"
  
      convert "Coordinatefiles/finaledges.png" txt: > "Coordinatefiles/test1.txt"

      grep -v '(0,0,0,0)' "Coordinatefiles/test1.txt" > "Coordinatefiles/test2.txt"

      grep -v 'graya(255,0)' "Coordinatefiles/test2.txt" > "Coordinatefiles/test3.txt"

      awk '{print $1}' "Coordinatefiles/test3.txt" > "Coordinatefiles/test4.txt"

      cat "Coordinatefiles/test4.txt" | grep -vE '#' | sed 's/://g' > "Coordinatefiles/$cleanfile.csv"

      width=$(identify -format '%w' "Coordinatefiles/finaledges.png")
      height=$(identify -format '%h' "Coordinatefiles.finaledges.png")

      echo "$width $height"

      python3 lines.py "$cleanfile.csv" "$BLOBSIZE" "$width" "$height"
}

progressBar () {
  
  progress=$(echo "$progressBarWidth/$taskCount*$tasksDone" | bc -l)
  fill=$(printf "%.0f\n" $progress)
  if [ $fill -gt $progressBarWidth ]; then
    fill=$progressBarWidth
  fi
  empty=$(($fill-$progressBarWidth))

  percent=$(echo "100/$taskCount*$tasksDone" | bc -l)
  percent=$(printf "%0.2f\n" $percent)
  if [ $(echo "$percent>100" | bc) -gt 0 ]; then
    percent="100.00"
  fi

  printf "\r["
  printf "%${fill}s" '' | tr ' ' ▉
  printf "%${empty}s" '' | tr ' ' ░
  printf "] $percent%% - $text "
}

createHelperFile(){
  file="Helperfiles/Helperfile.txt"
  touch $file
  echo "--Command to run--\n" > $file
  echo "./start -x $XOFF -y $YOFF -w $WIDTH -h $HEIGHT -s $SCALE -p $PPI -t $THRESHOLD -b $BLOBSIZE" >> $file
  echo "\n --Variables-- \n" >> $file
  echo "-xoffset: $XOFF"  >> $file
  echo "-yoffset: $YOFF"  >> $file
  echo "-width:   $WIDTH"  >> $file
  echo "-height:  $HEIGHT"  >> $file
  echo "-scale:   $SCALE" >> $file
  echo "-PPI:     $PPI" >> $file
  echo "-Threshold $THRESHOLD" >> $file
  echo "-BLOBSIZE $BLOBSIZE" >> $file
  layer="./layers.txt"
  echo "\n--Active layers list for wall--\n" >> $file
  echo "to be filled with layers that will only show the wall" >> $file
  echo "\n--Active layer list--\n" >> $file
  awk '!a[$0]++' "layers.txt" >>$file
}

createDirectories(){
  rmdir "Coordinatefiles/combined.json"
  rmdir "Coordinatefiles/minified.json"
  if [[ ! -e "$DWGfiles" ]]; then
    mkdir DWGfiles
  fi
    if [[ ! -e "$PNG" ]]; then
    mkdir PNG
  fi
    if [[ ! -e "$Helperfiles" ]]; then
    mkdir Helperfiles
  fi
    if [[ ! -e "$PRIMEPNG" ]]; then
    mkdir PRIMEPNG
  fi
     if [[ ! -e "Coordinatefiles" ]]; then
    mkdir Coordinatefiles
  fi
  touch "Coordinatefiles/combined.json"
}

removeCapitalLetters(){
  for f in $FILES*.DWG
  do
    pdffile=${f##*/}
    cleanfile=${pdffile%.*} 
    mv -f "$f" "$cleanfile.dwg"
  done

  for f in $FILES*.dwg
  do
  mv -f "$f" "${f// /_}"
  done
}

createDirectories
createHelperFile
removeCapitalLetters

echo "\n\nStarting script with -x $XOFF -y $YOFF -w $WIDTH -h $HEIGHT -s $SCALE -p $PPI -t $THRESHOLD -b $BLOBSIZE -o $Outerwallsflag \nMore details can be found in the Helperfile inside the Helperfiles directory."
echo "\n...please be patient..."

for f in $FILES*.dwg  
do
  pdffile=${f##*/}
  cleanfile=${pdffile%.*} 
  text=$(echo "$cleanfile done")
  "$binary" -no-gui -no-dock-icon -allow-multiple-instances -autostart "javascript.js" "-f" "$f" "-x" "$XOFF" "-y" "$YOFF" "-w" "$WIDTH" "-h" "$HEIGHT" "-s" "$SCALE" "-o" "$Outerwallsflag" "-r" 2>$1 | grep "MESSAGE:"
  mainConversion $cleanfile $PPI $THRESHOLD

if [ "$Outerwallsflag" == "true" ];then
  getCoordinates $PPI $cleanfile
fi
  (( tasksDone += 1 ))
  progressBar $taskCount $taskDone $text
done

for f in $FILES*.dwg  
do
  mv "$f" "DWGfiles"
done


Coordinatefiles=$PWD/Coordinatefiles/
array=()
for c in $Coordinatefiles*.json
  do
    array+=("$c")
  done

jq -s add "${array[@]}" > "Coordinatefiles/final.json"
jq -c . < "Coordinatefiles/final.json" > "Coordinatefiles/minified.json"

rm "Coordinatefiles/final.json" "Coordinatefiles/filled.png" "Coordinatefiles/finallines.png" "Coordinatefiles/auto-level.png" "Coordinatefiles/final.png" "Coordinatefiles/5.png" "Coordinatefiles/test1.txt" "Coordinatefiles/test2.txt" "Coordinatefiles/test3.txt" "Coordinatefiles/test4.txt" "Coordinatefiles/1.png" "Coordinatefiles/2.png" "Coordinatefiles/4.png"

echo "\n...should be all done..."
#Just to remove the annoying debug log that QCAD automatically makes. This keeps the terminal screen clean as well.
log="./$1"
[ -e "$log" ] && rm $log

