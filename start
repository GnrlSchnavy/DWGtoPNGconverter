#!/bin/sh
#-h for help
Outerwallsflag="false"

#Getting parameters
while getopts "x:y:w:h:s:pt:o" option
do
  case "${option}"
  in
  x) XOFF=$OPTARG;;
  y) YOFF=$OPTARG;;
  w) WIDTH=$OPTARG;;
  h) HEIGHT=$OPTARG;;
  s) SCALE=$OPTARG;;
  t) THRESHOLD=$OPTARG;;
  p) PPI=$OPTARG;;
  o) Outerwallsflag="true";;
  esac
done



#Check if PPI and THRESHOLD variables were set, if not, use default values
if [ -z "$PPI" ]; then 
  PPI=1200
fi 
if [ -z "$THRESHOLD" ]; then 
  THRESHOLD=0.08
fi 
if [ -z "$SCALE" ]; then
  SCALE=1000
fi

#Preparations to launch QCAD from command line
FILES=$PWD/
binary="/Applications/QCAD-Pro.app/Contents/resources/qcad"
shopt -s nullglob
#Progressbar setup
taskCount=(*.dwg)
taskCount=${#taskCount[@]}
taskDone=0
progressBarWidth=20

getCoordinates (){
   convert -density "$1"                \
      "Coordinatefiles/$2.pdf"      \
      -resize 2048                      \
      -sharpen 0x1.0                    \
      -colorspace Gray                  \
      -quality 90                       \
      -background white                 \
      -alpha remove                     \
      -negate       \
      -threshold 0 \
       -negate      \
      "Coordinatefiles/$2.png"

      convert "Coordinatefiles/$2.png" -auto-level "Coordinatefiles/auto-level.png"
      # convert "Coordinatefiles/1.png" -canny 0x1+90%+1% "Coordinatefiles/2.png"
      # convert "Coordinatefiles/2.png" -fill red -draw "color 0,0 floodfill" -alpha off \
      # -fill black +opaque red -fill white -opaque red "Coordinatefiles/4.png"
      convert "Coordinatefiles/auto-level.png"  -fill red -fuzz 5% -draw "color 0,0 floodfill" -fill black +opaque red -fill white -opaque red -alpha off -morphology close diamond "Coordinatefiles/filled.png"
      convert "Coordinatefiles/filled.png" -morphology edgein octagon:1 "Coordinatefiles/finallines.png"


    #   for i in `seq 1 1`;
    # do
    #   convert "Coordinatefiles/5.png" -auto-level "Coordinatefiles/1.png"
    #   convert "Coordinatefiles/1.png" -canny 0x1+10%+30% "Coordinatefiles/2.png"
    #   convert "Coordinatefiles/2.png" -fill red -draw "color 0,0 floodfill" -alpha off \
    #   -fill black +opaque red -fill white -opaque red "Coordinatefiles/4.png"
    #   convert "Coordinatefiles/4.png" -morphology edgein octagon:1 "Coordinatefiles/5.png"
    # done 

      convert "Coordinatefiles/finallines.png" -transparent black "Coordinatefiles/finaledges.png"
  
      convert "Coordinatefiles/finaledges.png" txt: > "Coordinatefiles/test1.txt"

      grep -v '(0,0,0,0)' "Coordinatefiles/test1.txt" > "Coordinatefiles/test2.txt"
      

      grep -v 'graya(255,0)' "Coordinatefiles/test2.txt" > "Coordinatefiles/test3.txt"
      

      awk '{print $1}' "Coordinatefiles/test3.txt" > "Coordinatefiles/test4.txt"
     

      cat "Coordinatefiles/test4.txt" | grep -vE '#' | sed 's/://g' > "Coordinatefiles/$cleanfile.csv"

      python3 lines.py "$cleanfile.csv" "$WIDTH" "$HEIGHT"
}

progressBar () {
  
  # Calculate number of fill/empty slots in the bar
  progress=$(echo "$progressBarWidth/$taskCount*$tasksDone" | bc -l)  
  fill=$(printf "%.0f\n" $progress)
  if [ $fill -gt $progressBarWidth ]; then
    fill=$progressBarWidth
  fi
  empty=$(($fill-$progressBarWidth))

  # Percentage Calculation
  percent=$(echo "100/$taskCount*$tasksDone" | bc -l)
  percent=$(printf "%0.2f\n" $percent)
  if [ $(echo "$percent>100" | bc) -gt 0 ]; then
    percent="100.00"
  fi

  # Output to screen
  printf "\r["
  printf "%${fill}s" '' | tr ' ' ▉
  printf "%${empty}s" '' | tr ' ' ░
  printf "] $percent%% - $text "
}

#Check and create extra directorys if needed
  [ -d "$DWGfiles" ] && echo "$DWGfiles directory already exists" || mkdir DWGfiles
  [ -d "$PNG" ] && echo "PNG folder already exists" || mkdir PNG
  [ -d "$Helperfiles" ] && echo "Helperfiles folder already exists" || mkdir Helperfiles
  [ -d "$PRIMEPNG" ] && echo "PRIMEPNG folder already exists" || mkdir PRIMEPNG
  if [ "$Outerwallsflag" == "true" ];then
      [ -d "$Coordinatefiles" ] && echo "$Coordinatefiles folder already exusts" || mkdir Coordinatefiles
  fi
#Creating helperfile and adding all backlog info to it.
file="Helperfiles/Helperfile.txt"
touch $file
echo "--Command to run--\n" > $file
echo "./start -x $XOFF -y $YOFF -w $WIDTH -h $HEIGHT -s $SCALE -p $PPI -t $THRESHOLD" >> $file
echo "\n --Variables-- \n" >> $file
echo "-xoffset: $XOFF"  >> $file
echo "-yoffset: $YOFF"  >> $file
echo "-width:   $WIDTH"  >> $file
echo "-height:  $HEIGHT"  >> $file
echo "-scale:   $SCALE" >> $file
echo "-PPI:     $PPI" >> $file
echo "-Threshold $THRESHOLD" >> $file
layer="./layers.txt"
echo "\n--Active layers list for wall--\n" >> $file
echo "to be filled with layers that will only show the wall" >> $file
echo "\n--Active layer list--\n" >> $file
awk '!a[$0]++' "layers.txt" >>$file


#Just some debugging info for the user
echo "\n\nStarting script with -x $XOFF -y $YOFF -w $WIDTH -h $HEIGHT -s $SCALE  \nMore details can be found in the Helperfile inside the Helperfiles directory."
echo "\n...please be patient..."

#Loop over all the .dwg files that are found. Parse the filenames so everything can be used locally in any given directory
for f in $FILES*.dwg
do
mv -f "$f" "${f// /_}"
done

for f in $FILES*.dwg  #Case-sensitive. If the script doesn't find any files, maybe the files are .DWG instead of .dwg.
do
  pdffile=${f##*/}
  cleanfile=${pdffile%.*} 
  text=$(echo "$cleanfile done")

#Start QCAD with given paramteres, returns a pdf file of the first .dwg file
  "$binary" -no-gui -no-dock-icon -allow-multiple-instances -autostart "javascript.js" "-f" "$f" "-x" "$XOFF" "-y" "$YOFF" "-w" "$WIDTH" "-h" "$HEIGHT" "-s" "$SCALE" "-o" "$Outerwallsflag" "-r" 2>$1 | grep "MESSAGE:" 

#Convert pdf to PNG
  convert -density $PPI                 \
  "Helperfiles/$cleanfile.pdf"          \
    -alpha off                          \
    -negate                             \
    \(                                  \
       -clone 0                         \
       -fill "#000000"                  \
       -colorize 100                    \
    \)                                  \
    \(                                  \
       -clone 0,1                       \
       -compose difference              \
       -composite                       \
       -separate                        \
       +channel                         \
       -evaluate-sequence max           \
       -auto-level                      \
    \)                                  \
     -delete 1                          \
     -alpha off                         \
     -compose over                      \
     -compose copy_opacity              \
     -composite                         \
  -resize 2048                          \
  -sharpen 0x1.0                        \
  -colorspace Gray                      \
  -quality 90                           \
  "PNG/$cleanfile.png"

#Just a small extra conversion to make sure a pixel is either white or completely transparant
  convert "PNG/$cleanfile.png"          \
  -channel A -fx "p*(p>$THRESHOLD?22:0)"\
  "PNG/$cleanfile.png"

#Conversion for Prime ready floorplans
   convert -density $PPI                \
      "Helperfiles/$cleanfile.pdf"      \
      -resize 2048                      \
      -sharpen 0x1.0                    \
      -colorspace Gray                  \
      -quality 90                       \
      -background white                 \
      -alpha remove                     \
      -negate       \
      -threshold 0 \
       -negate      \
      "PRIMEPNG/$cleanfile.png"


if [ "$Outerwallsflag" == "true" ];then
  getCoordinates $PPI $cleanfile
fi
      # rm "Coordinatefiles/$cleanfile.csv" "Coordinatefiles/$cleanfile.png"   

  (( tasksDone += 1 ))
  progressBar $taskCount $taskDone $text

done

rm "Coordinates/filled.png" "Coordinates/finallines.png" "Coordinates/finaledges" "Coordinates/autolevel.png" "Coordinatefiles/final.png" "Coordinatefiles/5.png" "Coordinatefiles/test1.txt" "Coordinatefiles/test2.txt" "Coordinatefiles/test3.txt" "Coordinatefiles/test4.txt" "Coordinatefiles/1.png" "Coordinatefiles/2.png" "Coordinatefiles/4.png"

for f in $FILES*.dwg  #Case-sensitive. If the script doesn't find any files, maybe the files are .DWG instead of .dwg.
do
  mv "$f" "DWGfiles"
done

echo "\n...should be all done..."



#Just to remove the annoying debug log that QCAD automatically makes. This keeps the terminal screen clean as well.
log="./$1"
[ -e "$log" ] && rm $log

